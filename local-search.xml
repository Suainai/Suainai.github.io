<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring框架概述</title>
      <link href="/2025/06/04/Spring/"/>
      <url>/2025/06/04/Spring/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-概述"><a class="markdownIt-Anchor" href="#第一章-概述"></a> 第一章 概述</h2><h3 id="一-why-spring为什么使用spring"><a class="markdownIt-Anchor" href="#一-why-spring为什么使用spring"></a> 一、Why Spring?（为什么使用Spring）</h3><p>官网对Spring的描述如下：</p><p>1.<em>Spring无处不在</em></p><p>Spring框架因其灵活性受到全球开发者的信赖。无论是流媒体电视、在线购物，还是无数创新解决方案，Spring每天为数百万用户提供愉悦体验。Spring还得到众多科技巨头的贡献，包括阿里巴巴、亚马逊、谷歌、微软等。</p><p><em>2.Spring灵活多变</em></p><p>Spring通过其扩展能力和第三方库支持，使开发者能够构建几乎任何想象得到的应用程序。Spring框架的**控制反转（IoC）<strong>和</strong>依赖注入（DI）**为广泛特性和功能提供基础。无论是构建安全的、响应式的、基于云的微服务，还是处理复杂的企业流数据，Spring都提供相应工具。</p><p><em>3.Spring高效生产</em></p><p>Spring Boot**（后续学习的重点框架）彻底简化了Java编程任务的处理方式。Spring Boot结合应用程序上下文和自动配置的嵌入式Web服务器，使微服务开发变得轻松。结合<strong>Spring Cloud</strong>的丰富支持库、服务器、模式和模板，可以在创纪录时间内将基于微服务的架构安全部署到云端。</p><p><em>4.Spring速度快</em></p><p>Spring的工程师极为注重性能。默认情况下，Spring提供快速启动、快速关闭和优化的执行效率。Spring项目越来越多地支持<strong>响应式（非阻塞）编程模型</strong>，以提升效率。Spring Boot显著提高开发者生产力，构建应用程序比其他方式更轻松。</p><p><em>5.Spring安全可靠</em></p><p>Spring在处理安全问题上表现卓越。其代码贡献者与安全专家共同修补和测试报告的漏洞。第三方依赖关系得到密切监控，定期更新，确保数据和应用程序安全。<strong>Spring Security</strong>便于集成行业标准安全方案，并提供可靠的默认安全解决方案。</p><p><em>6.Spring社区支持强大</em></p><p>Spring社区庞大、全球化且多样化，涵盖从初学者到资深专业人士的各类开发者。无论处于职业生涯的哪个阶段，都能找到支持和资源，助力进入下一阶段。</p><h3 id="二-spring的特性"><a class="markdownIt-Anchor" href="#二-spring的特性"></a> 二、Spring的特性</h3><ul><li><strong>核心技术</strong>：依赖注入、事件模型、资源处理、国际化（i18n）、验证、数据绑定、类型转换、Spring表达式语言（SpEL）、面向切面编程（AOP）。核心技术是其他特性的基础。</li><li><strong>测试</strong>：支持模拟对象、TestContext框架、Spring MVC测试。</li><li><strong>数据访问</strong>：事务管理、DAO支持、JDBC、ORM、XML序列化。主要学习其事务管理及JDBC模板（JdbcTemplate）。</li><li><strong>Web框架</strong>：Spring MVC和Spring WebFlux。</li><li><strong>集成</strong>：支持远程调用（Remoting）、JMS、JCA、JMX、邮件、任务调度、缓存等第三方组件。</li><li><strong>语言支持</strong>：Kotlin、Groovy及动态语言。</li></ul><p>三、版本关系</p><p>当前主流版本为<strong>5.x</strong>和<strong>6.x</strong>。<strong>Spring 6.x</strong>的GA版（稳定通用版）于2022年11月发布，因此仅在此之后的新项目可能选用6.x。Spring 6.0已迁移至<strong>Jakarta EE 9+</strong>，取代基于<code>javax</code>的Java EE API。</p><table><thead><tr><th>Spring版本</th><th>JDK版本</th><th>Jakarta EE</th><th>Servlet版本</th><th>Tomcat版本</th><th>发布时间</th></tr></thead><tbody><tr><td>6.x</td><td>JDK 17</td><td>Jakarta EE 9</td><td>5.0+</td><td>Tomcat 10</td><td>2022年</td></tr><tr><td>5.x</td><td>JDK 8/11</td><td>Java EE 7/8</td><td>3.1/4.0</td><td>Tomcat 8/9</td><td>2018年</td></tr></tbody></table><p><strong>注意</strong>：5.x与6.x在使用上几乎无差异。</p><h2 id="第二章-ioc容器"><a class="markdownIt-Anchor" href="#第二章-ioc容器"></a> 第二章 IOC容器</h2><p>前置知识：常见名词</p><ul><li><strong>容器</strong>：管理对象的生命周期及其依赖关系的组件。类比咖啡机，咖啡豆为原料（bean），咖啡机为容器。</li><li><strong>POJO</strong>（Plain Old Java Object）：简单Java对象，未继承任何类、未实现接口、未被框架侵入。不含业务方法或连接方法，实际为普通JavaBean。</li><li><strong>JavaBean</strong>：符合特定规范的可重用Java组件，需满足：<ol><li>属性为<code>private</code>。</li><li>提供公共无参构造函数。</li><li>属性通过<code>getter</code>和<code>setter</code>访问，方法遵循命名规范。</li><li>实现<code>Serializable</code>接口。<br />JavaBean被视为遵循特定约定的POJO。</li></ol></li><li><strong>SpringBean</strong>：由Spring容器管理的对象，通过配置文件或JavaConfig等自动实例化并销毁。</li><li><strong>EntityBean</strong>：域模型对象，用于O/R映射，将数据库表记录映射为内存中的Entity对象。创建、删除、修改EntityBean会同步数据库记录。</li></ul><p>POJO与JavaBean的区别</p><table><thead><tr><th>特性</th><th>POJO</th><th>JavaBean</th></tr></thead><tbody><tr><td>限制</td><td>无特殊限制，仅受Java语言约束</td><td>特殊POJO，需遵循特定规范</td></tr><tr><td>成员控制</td><td>不限制成员访问</td><td>通过<code>getter</code>/<code>setter</code>完全控制</td></tr><tr><td>序列化</td><td>可选实现<code>Serializable</code></td><td>必须实现<code>Serializable</code></td></tr><tr><td>字段访问</td><td>可通过字段名直接访问</td><td>仅通过<code>getter</code>/<code>setter</code>访问</td></tr><tr><td>字段可见性</td><td>任意可见性</td><td>仅<code>private</code></td></tr><tr><td>构造函数</td><td>可无无参构造函数</td><td>必须有无参构造函数</td></tr><tr><td>使用场景</td><td>不限制成员访问</td><td>提供部分实体访问</td></tr></tbody></table><p>SpringBean与JavaBean的区别</p><ol><li><strong>用途</strong>：JavaBean多用于值传递；SpringBean用途广泛，任何组件均可为bean。</li><li><strong>生命周期</strong>：JavaBean无容器管理；SpringBean由Spring管理其生命周期。</li></ol><h3 id="一-概述"><a class="markdownIt-Anchor" href="#一-概述"></a> 一、概述</h3><p>Maven依赖</p><p>为Spring项目创建Maven工程，添加以下依赖（以Spring 5.x为例）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring核心组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.18.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring IoC（依赖注入）基础实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.18.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring扩展服务，支持邮件、任务调度、JNDI、EJB、缓存等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.18.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：如果使用了jdk17，也可以使用spring的6.x版本，但是要注意，多个spring相关的依赖版本必须一致。<br />依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring的核心组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringIoC(依赖注入)的基础实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring提供在基础IoC功能上的扩展服务，此外还提供许多企业级服务的支持，如邮件服务、任务调度、JNDI定位、EJB集成、远程访问、缓存以及各种视图层框架的封装等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本章介绍了Spring框架实现控制反转(IoC)的原理， IoC也称为依赖注入(DI)。</p><p>org.springframework.beans和org.springframework.context包是Spring框架的IoC容器的基础。其中BeanFactory接口提供了容器的基本功能，而ApplicationContext添加了更多特定于企业的功能。ApplicationContext是BeanFactory的一个完整超集。</p><p>【beanFactory】和【ApplicationContext】接口展示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactory</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">EnvironmentCapable</span>， ListableBeanFactory， HierarchicalBeanFactory， MessageSource， ApplicationEventPublisher， ResourcePatternResolver &#123;&#125;</span><br></pre></td></tr></table></figure><p>【BeanFactory接口】提供了一种高级的配置机制，能够管理任何类型的对象。 ApplicationContext是BeanFactory的子接口。 它对BeanFactory进行了补充:</p><p>更容易与Spring的AOP特性集成 。<br />【MessageSource接口】用于消息资源处理(用于国际化) ，解析消息的能力，支持国际化。<br />【ApplicationEventPublisher接口】事件发布，向注册侦听器发布事件的能力。<br />应用程序层特定的上下文，如WebApplicationContext用于web应用程序。<br />【ResourceLoader接口】拥有以通用方式加载文件资源的能力。<br />我们可以阅读以下内容，并在后面的学习中认真思考：</p><p>1、由Spring IoC容器【管理】的构成【应用程序主干的对象】称为【bean】。</p><p>2、bean是由Spring IoC容器实例化、组装和管理的对象。</p><p>3、bean及其之间的依赖关系反映在容器使用的【配置元数据】中，元数据可以是配置文件，也可以使用Java注解或代码申明。</p><p>4、 容器通过读取【配置元数据】获得关于要实例化、配置和组装哪些对象的指令。 配置元数据以XML、Java注解或Java代码表示。元数据表达了【组成应用程序的对象】以及这些对象之间丰富的【相互依赖关系】。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> IoC </tag>
            
            <tag> 依赖注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个运维小老弟的自我修养</title>
      <link href="/2025/05/30/YunWei/"/>
      <url>/2025/05/30/YunWei/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/05/27/hello-world/"/>
      <url>/2025/05/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
